// Generated by Bisonc++ V6.00.00 on Tue, 16 May 2017 13:53:39 +0200

// base/comment

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations
// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <iomanip>
#include <unordered_map>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        PARSE_ACCEPT_   = 0,   // `ACCEPT' TRANSITION
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {311, 3}, // 1: input ->  opt_directives section_delimiter rules
     {313, 2}, // 2: section_delimiter (SECTION_DELIMITER) ->  SECTION_DELIMITER '\x0a'
     {315, 1}, // 3: identifier (IDENTIFIER) ->  IDENTIFIER
     {316, 0}, // 4: _sc_name ->  <empty>
     {317, 2}, // 5: _start_condition_type (INCL_START_CONDITION) ->  INCL_START_CONDITION _sc_name
     {317, 2}, // 6: _start_condition_type (EXCL_START_CONDITION) ->  EXCL_START_CONDITION _sc_name
     {318, 2}, // 7: _start_condition_names ->  _start_condition_names identifier
     {318, 1}, // 8: _start_condition_names ->  identifier
     {319, 2}, // 9: _start_condition_directive ->  _start_condition_type _start_condition_names
     {320, 1}, // 10: _name_def ->  identifier
     {321, 1}, // 11: _stringType (STRING) ->  STRING
     {321, 1}, // 12: _stringType (RAWSTRING) ->  RAWSTRING
     {322, 2}, // 13: _name_definition ->  _name_def _stringType
     {323, 1}, // 14: _directive ->  option
     {323, 1}, // 15: _directive ->  _start_condition_directive
     {323, 1}, // 16: _directive ->  _name_definition
     {323, 1}, // 17: _directive (errTok_) ->  errTok_
     {323, 0}, // 18: _directive ->  <empty>
     {325, 2}, // 19: _directive_line ('\x0a') ->  _directive '\x0a'
     {312, 2}, // 20: opt_directives ->  opt_directives _directive_line
     {312, 0}, // 21: opt_directives ->  <empty>
     {326, 1}, // 22: _baseclassheader (BASECLASSHEADER) ->  BASECLASSHEADER
     {327, 1}, // 23: _classheader (CLASSHEADER) ->  CLASSHEADER
     {328, 1}, // 24: _classname (CLASSNAME) ->  CLASSNAME
     {329, 1}, // 25: _filenames (FILENAMES) ->  FILENAMES
     {330, 1}, // 26: _implementationheader (IMPLEMENTATIONHEADER) ->  IMPLEMENTATIONHEADER
     {331, 1}, // 27: _inputinterface (INPUTINTERFACE) ->  INPUTINTERFACE
     {332, 1}, // 28: _inputimplementation (INPUTIMPLEMENTATION) ->  INPUTIMPLEMENTATION
     {333, 1}, // 29: _lexfunctionname (LEXFUNCTIONNAME) ->  LEXFUNCTIONNAME
     {334, 1}, // 30: _lexsource (LEXSOURCE) ->  LEXSOURCE
     {335, 1}, // 31: _namespace (NAMESPACE) ->  NAMESPACE
     {336, 1}, // 32: _skeleton_directory (SKELETON_DIRECTORY) ->  SKELETON_DIRECTORY
     {337, 1}, // 33: _startcondition_name (STARTCONDITION) ->  STARTCONDITION
     {338, 1}, // 34: _target_directory (TARGET_DIRECTORY) ->  TARGET_DIRECTORY
     {339, 1}, // 35: _stringOrIdent (STRING) ->  STRING
     {339, 1}, // 36: _stringOrIdent (IDENTIFIER) ->  IDENTIFIER
     {339, 1}, // 37: _stringOrIdent (RAWSTRING) ->  RAWSTRING
     {340, 0}, // 38: _opt_is ->  <empty>
     {340, 1}, // 39: _opt_is ('=') ->  '='
     {324, 3}, // 40: option ->  _inputinterface _opt_is _stringOrIdent
     {324, 3}, // 41: option ->  _inputimplementation _opt_is _stringOrIdent
     {324, 3}, // 42: option ->  _classname _opt_is _stringOrIdent
     {324, 3}, // 43: option ->  _filenames _opt_is _stringOrIdent
     {324, 3}, // 44: option ->  _lexfunctionname _opt_is _stringOrIdent
     {324, 3}, // 45: option ->  _baseclassheader _opt_is _stringOrIdent
     {324, 3}, // 46: option ->  _classheader _opt_is _stringOrIdent
     {324, 3}, // 47: option ->  _implementationheader _opt_is _stringOrIdent
     {324, 3}, // 48: option ->  _lexsource _opt_is _stringOrIdent
     {324, 3}, // 49: option ->  _skeleton_directory _opt_is _stringOrIdent
     {324, 3}, // 50: option ->  _startcondition_name _opt_is _stringOrIdent
     {324, 3}, // 51: option ->  _target_directory _opt_is _stringOrIdent
     {324, 3}, // 52: option ->  _namespace _opt_is _stringOrIdent
     {324, 1}, // 53: option (CASEINSENSITIVE) ->  CASEINSENSITIVE
     {324, 1}, // 54: option (INTERACTIVE) ->  INTERACTIVE
     {324, 1}, // 55: option (PRINT) ->  PRINT
     {324, 1}, // 56: option (NOLINES) ->  NOLINES
     {324, 1}, // 57: option (DEBUG) ->  DEBUG
     {341, 1}, // 58: combi_chars (',') ->  ','
     {341, 1}, // 59: combi_chars ('=') ->  '='
     {341, 1}, // 60: combi_chars ('-') ->  '-'
     {341, 1}, // 61: combi_chars (''') ->  '''
     {342, 1}, // 62: _ms_name ->  identifier
     {343, 3}, // 63: _ms_name_list (',') ->  _ms_name_list ',' _ms_name
     {343, 1}, // 64: _ms_name_list ->  _ms_name
     {344, 1}, // 65: _ms_specs ('*') ->  '*'
     {344, 1}, // 66: _ms_specs ->  _ms_name_list
     {345, 1}, // 67: _ms_angular ('<') ->  '<'
     {346, 3}, // 68: ms_spec ('>') ->  _ms_angular _ms_specs '>'
     {347, 0}, // 69: _m_contents ->  <empty>
     {348, 2}, // 70: _cc_start (CC_START) ->  CC_START _m_contents
     {349, 2}, // 71: _cc_negated (CC_NEGATED) ->  CC_NEGATED _m_contents
     {350, 1}, // 72: _cc_end (']') ->  ']'
     {351, 1}, // 73: _cc_literal ('/') ->  '/'
     {351, 1}, // 74: _cc_literal ('|') ->  '|'
     {351, 1}, // 75: _cc_literal ('(') ->  '('
     {351, 1}, // 76: _cc_literal (')') ->  ')'
     {351, 1}, // 77: _cc_literal ('*') ->  '*'
     {351, 1}, // 78: _cc_literal ('+') ->  '+'
     {351, 1}, // 79: _cc_literal ('?') ->  '?'
     {351, 1}, // 80: _cc_literal ('{') ->  '{'
     {351, 1}, // 81: _cc_literal ('}') ->  '}'
     {351, 1}, // 82: _cc_literal ('<') ->  '<'
     {351, 1}, // 83: _cc_literal ('>') ->  '>'
     {351, 1}, // 84: _cc_literal ('[') ->  '['
     {351, 1}, // 85: _cc_literal ('.') ->  '.'
     {351, 1}, // 86: _cc_literal ('^') ->  '^'
     {351, 1}, // 87: _cc_literal ('$') ->  '$'
     {351, 1}, // 88: _cc_literal (DOLLAR) ->  DOLLAR
     {351, 1}, // 89: _cc_literal (DECIMAL) ->  DECIMAL
     {351, 1}, // 90: _cc_literal (IDENTIFIER) ->  IDENTIFIER
     {351, 1}, // 91: _cc_literal (CHAR) ->  CHAR
     {351, 1}, // 92: _cc_literal (STRING) ->  STRING
     {351, 1}, // 93: _cc_literal ->  combi_chars
     {352, 1}, // 94: _cc_escape (ESCAPE_SEQUENCE) ->  ESCAPE_SEQUENCE
     {352, 1}, // 95: _cc_escape (QUOTES) ->  QUOTES
     {353, 1}, // 96: _cc_element ->  _cc_escape
     {353, 1}, // 97: _cc_element (PREDEFINED_CLASS) ->  PREDEFINED_CLASS
     {353, 1}, // 98: _cc_element ->  _cc_literal
     {354, 2}, // 99: _cc_contents ->  _cc_contents _cc_element
     {354, 1}, // 100: _cc_contents ->  _cc_element
     {355, 2}, // 101: _cc_set ->  _cc_start _cc_end
     {355, 2}, // 102: _cc_set ->  _cc_negated _cc_end
     {355, 3}, // 103: _cc_set ->  _cc_start _cc_contents _cc_end
     {355, 3}, // 104: _cc_set ->  _cc_negated _cc_contents _cc_end
     {356, 3}, // 105: characterclass (CC_PLUS) ->  characterclass CC_PLUS characterclass
     {356, 3}, // 106: characterclass (CC_MINUS) ->  characterclass CC_MINUS characterclass
     {356, 1}, // 107: characterclass ->  _cc_set
     {357, 1}, // 108: _decimal (DECIMAL) ->  DECIMAL
     {358, 1}, // 109: _interval ->  _decimal
     {358, 3}, // 110: _interval (',') ->  _decimal ',' _decimal
     {358, 2}, // 111: _interval (',') ->  _decimal ','
     {359, 1}, // 112: _single_char (CHAR) ->  CHAR
     {359, 1}, // 113: _single_char ->  combi_chars
     {360, 1}, // 114: _open_paren ('(') ->  '('
     {361, 1}, // 115: _close_paren (')') ->  ')'
     {362, 1}, // 116: _open_curly ('{') ->  '{'
     {363, 1}, // 117: _unit ('^') ->  '^'
     {363, 1}, // 118: _unit ('$') ->  '$'
     {363, 1}, // 119: _unit (DOLLAR) ->  DOLLAR
     {363, 1}, // 120: _unit (STRING) ->  STRING
     {363, 1}, // 121: _unit (RAWSTRING) ->  RAWSTRING
     {363, 1}, // 122: _unit (QUOTES) ->  QUOTES
     {363, 1}, // 123: _unit (ESCAPE_SEQUENCE) ->  ESCAPE_SEQUENCE
     {363, 1}, // 124: _unit ('.') ->  '.'
     {363, 1}, // 125: _unit ->  _single_char
     {363, 1}, // 126: _unit ->  characterclass
     {364, 1}, // 127: _quantifier ('*') ->  '*'
     {364, 1}, // 128: _quantifier ('+') ->  '+'
     {364, 1}, // 129: _quantifier ('?') ->  '?'
     {365, 1}, // 130: _regex_unit ->  _unit
     {365, 4}, // 131: _regex_unit ('}') ->  _regex_unit _open_curly _interval '}'
     {365, 2}, // 132: _regex_unit ->  _regex_unit _quantifier
     {365, 3}, // 133: _regex_unit ->  _open_paren _regex _close_paren
     {365, 2}, // 134: _regex_unit (CHAR) ->  _regex_unit _regex_unit
     {366, 1}, // 135: _regex ->  _regex_unit
     {366, 3}, // 136: _regex ('|') ->  _regex '|' _regex
     {366, 3}, // 137: _regex ('/') ->  _regex '/' _regex
     {367, 1}, // 138: regexOrEOF ->  _regex
     {367, 1}, // 139: regexOrEOF (EOF_PATTERN) ->  EOF_PATTERN
     {368, 1}, // 140: action (BLOCK) ->  BLOCK
     {369, 0}, // 141: reset ->  <empty>
     {370, 5}, // 142: _msCompound_regex_list (ORNL) ->  _msCompound_regex_list ORNL '\x0a' reset _msCompound_regex_list
     {370, 1}, // 143: _msCompound_regex_list ->  regexOrEOF
     {371, 0}, // 144: _msCompound_rule ->  <empty>
     {371, 1}, // 145: _msCompound_rule ->  _msCompound_regex_list
     {371, 2}, // 146: _msCompound_rule ->  _msCompound_regex_list action
     {372, 3}, // 147: _msCompound_nl_rule ('\x0a') ->  _msCompound_rule '\x0a' reset
     {373, 0}, // 148: _opt_msCompound_nl_rules ->  <empty>
     {373, 2}, // 149: _opt_msCompound_nl_rules ->  _opt_msCompound_nl_rules _msCompound_nl_rule
     {374, 5}, // 150: msCompound ('{') ->  ms_spec '{' reset _opt_msCompound_nl_rules '}'
     {375, 3}, // 151: _optMs_regex ->  ms_spec reset regexOrEOF
     {375, 1}, // 152: _optMs_regex ->  regexOrEOF
     {376, 5}, // 153: _optMs_rule (ORNL) ->  _optMs_rule ORNL '\x0a' reset _optMs_rule
     {376, 1}, // 154: _optMs_rule ->  _optMs_regex
     {377, 1}, // 155: optMs_rule ->  _optMs_rule
     {377, 2}, // 156: optMs_rule ->  _optMs_rule action
     {378, 0}, // 157: _rule_def ->  <empty>
     {378, 1}, // 158: _rule_def (errTok_) ->  errTok_
     {378, 1}, // 159: _rule_def ->  optMs_rule
     {378, 1}, // 160: _rule_def ->  msCompound
     {379, 3}, // 161: _rule ('\x0a') ->  _rule_def '\x0a' reset
     {314, 2}, // 162: rules ->  rules _rule
     {314, 0}, // 163: rules ->  <empty>
     {380, 1}, // 164: input_$ ->  input
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { DEF_RED}, {   3} },                  
    { {     311}, {   1} }, // input         
    { {     312}, {   2} }, // opt_directives
    { {       0}, { -21} },                  
};

SR_ s_1[] =
{
    { { REQ_TOKEN}, {              2} }, 
    { {     EOF_}, { PARSE_ACCEPT_} }, 
    { {         0}, {              0} }, 
};

SR_ s_2[] =
{
    { { ERR_REQ_DEF}, {  46} },                              
    { {         313}, {   3} }, // section_delimiter         
    { {         325}, {   4} }, // _directive_line           
    { {         259}, {   5} }, // SECTION_DELIMITER         
    { {         323}, {   6} }, // _directive                
    { {         324}, {   7} }, // option                    
    { {         319}, {   8} }, // _start_condition_directive
    { {         322}, {   9} }, // _name_definition          
    { {    errTok_}, {  10} }, // errTok_                  
    { {         331}, {  11} }, // _inputinterface           
    { {         332}, {  12} }, // _inputimplementation      
    { {         328}, {  13} }, // _classname                
    { {         329}, {  14} }, // _filenames                
    { {         333}, {  15} }, // _lexfunctionname          
    { {         326}, {  16} }, // _baseclassheader          
    { {         327}, {  17} }, // _classheader              
    { {         330}, {  18} }, // _implementationheader     
    { {         334}, {  19} }, // _lexsource                
    { {         336}, {  20} }, // _skeleton_directory       
    { {         337}, {  21} }, // _startcondition_name      
    { {         338}, {  22} }, // _target_directory         
    { {         335}, {  23} }, // _namespace                
    { {         261}, {  24} }, // CASEINSENSITIVE           
    { {         269}, {  25} }, // INTERACTIVE               
    { {         274}, {  26} }, // PRINT                     
    { {         273}, {  27} }, // NOLINES                   
    { {         264}, {  28} }, // DEBUG                     
    { {         317}, {  29} }, // _start_condition_type     
    { {         320}, {  30} }, // _name_def                 
    { {         268}, {  31} }, // INPUTINTERFACE            
    { {         267}, {  32} }, // INPUTIMPLEMENTATION       
    { {         263}, {  33} }, // CLASSNAME                 
    { {         265}, {  34} }, // FILENAMES                 
    { {         270}, {  35} }, // LEXFUNCTIONNAME           
    { {         260}, {  36} }, // BASECLASSHEADER           
    { {         262}, {  37} }, // CLASSHEADER               
    { {         266}, {  38} }, // IMPLEMENTATIONHEADER      
    { {         271}, {  39} }, // LEXSOURCE                 
    { {         275}, {  40} }, // SKELETON_DIRECTORY        
    { {         276}, {  41} }, // STARTCONDITION            
    { {         277}, {  42} }, // TARGET_DIRECTORY          
    { {         272}, {  43} }, // NAMESPACE                 
    { {         258}, {  44} }, // INCL_START_CONDITION      
    { {         257}, {  45} }, // EXCL_START_CONDITION      
    { {         315}, {  46} }, // identifier                
    { {         279}, {  47} }, // IDENTIFIER                
    { {           0}, { -18} },                              
};

SR_ s_3[] =
{
    { { DEF_RED}, {    2} },         
    { {     314}, {   48} }, // rules
    { {       0}, { -163} },         
};

SR_ s_4[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR_ s_5[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {        10}, { 49} }, // '\x0a'
    { {         0}, {  0} },          
};

SR_ s_6[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {        10}, { 50} }, // '\x0a'
    { {         0}, {  0} },          
};

SR_ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR_ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR_ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR_ s_11[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  51} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_12[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  53} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_13[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  54} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_14[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  55} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_15[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  56} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_16[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  57} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_17[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  58} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_18[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  59} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_19[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  60} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_20[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  61} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_21[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  62} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_22[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  63} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_23[] =
{
    { { REQ_DEF}, {   3} },           
    { {     340}, {  64} }, // _opt_is
    { {      61}, {  52} }, // '='    
    { {       0}, { -38} },           
};

SR_ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR_ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR_ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR_ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR_ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR_ s_29[] =
{
    { { REQ_TOKEN}, {  4} },                          
    { {       318}, { 65} }, // _start_condition_names
    { {       315}, { 66} }, // identifier            
    { {       279}, { 47} }, // IDENTIFIER            
    { {         0}, {  0} },                          
};

SR_ s_30[] =
{
    { { REQ_TOKEN}, {  4} },               
    { {       321}, { 67} }, // _stringType
    { {       282}, { 68} }, // STRING     
    { {       281}, { 69} }, // RAWSTRING  
    { {         0}, {  0} },               
};

SR_ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR_ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR_ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR_ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR_ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR_ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR_ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR_ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR_ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR_ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR_ s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR_ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR_ s_44[] =
{
    { { DEF_RED}, {  2} },            
    { {     316}, { 70} }, // _sc_name
    { {       0}, { -4} },            
};

SR_ s_45[] =
{
    { { DEF_RED}, {  2} },            
    { {     316}, { 71} }, // _sc_name
    { {       0}, { -4} },            
};

SR_ s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_47[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR_ s_48[] =
{
    { { ERR_REQ_DEF}, {   40} },                   
    { {         379}, {   72} }, // _rule          
    { {         378}, {   73} }, // _rule_def      
    { {    errTok_}, {   74} }, // errTok_       
    { {         377}, {   75} }, // optMs_rule     
    { {         374}, {   76} }, // msCompound     
    { {         376}, {   77} }, // _optMs_rule    
    { {         346}, {   78} }, // ms_spec        
    { {         375}, {   79} }, // _optMs_regex   
    { {         345}, {   80} }, // _ms_angular    
    { {         367}, {   81} }, // regexOrEOF     
    { {          60}, {   82} }, // '<'            
    { {         366}, {   83} }, // _regex         
    { {         280}, {   84} }, // EOF_PATTERN    
    { {         365}, {   85} }, // _regex_unit    
    { {         363}, {   86} }, // _unit          
    { {         360}, {   87} }, // _open_paren    
    { {          94}, {   88} }, // '^'            
    { {          36}, {   89} }, // '$'            
    { {         285}, {   90} }, // DOLLAR         
    { {         282}, {   91} }, // STRING         
    { {         281}, {   92} }, // RAWSTRING      
    { {         283}, {   93} }, // QUOTES         
    { {         286}, {   94} }, // ESCAPE_SEQUENCE
    { {          46}, {   95} }, // '.'            
    { {         359}, {   96} }, // _single_char   
    { {         356}, {   97} }, // characterclass 
    { {          40}, {   98} }, // '('            
    { {         291}, {   99} }, // CHAR           
    { {         341}, {  100} }, // combi_chars    
    { {         355}, {  101} }, // _cc_set        
    { {          44}, {  102} }, // ','            
    { {          61}, {  103} }, // '='            
    { {          45}, {  104} }, // '-'            
    { {          39}, {  105} }, // '''            
    { {         348}, {  106} }, // _cc_start      
    { {         349}, {  107} }, // _cc_negated    
    { {         287}, {  108} }, // CC_START       
    { {         288}, {  109} }, // CC_NEGATED     
    { {       EOF_}, {   -1} }, // EOF_          
    { {           0}, { -157} },                   
};

SR_ s_49[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR_ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR_ s_51[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 110} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_53[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 114} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_54[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 115} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_55[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 116} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_56[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 117} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_57[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 118} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_58[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 119} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_59[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 120} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_60[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 121} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_61[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 122} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_62[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 123} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_63[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 124} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_64[] =
{
    { { REQ_TOKEN}, {   5} },                  
    { {       339}, { 125} }, // _stringOrIdent
    { {       282}, { 111} }, // STRING        
    { {       279}, { 112} }, // IDENTIFIER    
    { {       281}, { 113} }, // RAWSTRING     
    { {         0}, {   0} },                  
};

SR_ s_65[] =
{
    { { REQ_DEF}, {   3} },              
    { {     315}, { 126} }, // identifier
    { {     279}, {  47} }, // IDENTIFIER
    { {       0}, {  -9} },              
};

SR_ s_66[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR_ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR_ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR_ s_70[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR_ s_71[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR_ s_72[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -162} }, 
};

SR_ s_73[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 127} }, // '\x0a'
    { {         0}, {   0} },          
};

SR_ s_74[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -158} }, 
};

SR_ s_75[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -159} }, 
};

SR_ s_76[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -160} }, 
};

SR_ s_77[] =
{
    { { REQ_DEF}, {    4} },          
    { {     368}, {  128} }, // action
    { {     290}, {  129} }, // ORNL  
    { {     278}, {  130} }, // BLOCK 
    { {       0}, { -155} },          
};

SR_ s_78[] =
{
    { { REQ_DEF}, {    3} },         
    { {     123}, {  131} }, // '{'  
    { {     369}, {  132} }, // reset
    { {       0}, { -141} },         
};

SR_ s_79[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -154} }, 
};

SR_ s_80[] =
{
    { { REQ_TOKEN}, {   7} },                 
    { {       344}, { 133} }, // _ms_specs    
    { {        42}, { 134} }, // '*'          
    { {       343}, { 135} }, // _ms_name_list
    { {       342}, { 136} }, // _ms_name     
    { {       315}, { 137} }, // identifier   
    { {       279}, {  47} }, // IDENTIFIER   
    { {         0}, {   0} },                 
};

SR_ s_81[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -152} }, 
};

SR_ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR_ s_83[] =
{
    { { REQ_DEF}, {    3} },       
    { {     124}, {  138} }, // '|'
    { {      47}, {  139} }, // '/'
    { {       0}, { -138} },       
};

SR_ s_84[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -139} }, 
};

SR_ s_85[] =
{
    { { REQ_DEF}, {   32} },                   
    { {     362}, {  140} }, // _open_curly    
    { {     364}, {  141} }, // _quantifier    
    { {     365}, {  142} }, // _regex_unit    
    { {     123}, {  143} }, // '{'            
    { {      42}, {  144} }, // '*'            
    { {      43}, {  145} }, // '+'            
    { {      63}, {  146} }, // '?'            
    { {     363}, {   86} }, // _unit          
    { {     360}, {   87} }, // _open_paren    
    { {      94}, {   88} }, // '^'            
    { {      36}, {   89} }, // '$'            
    { {     285}, {   90} }, // DOLLAR         
    { {     282}, {   91} }, // STRING         
    { {     281}, {   92} }, // RAWSTRING      
    { {     283}, {   93} }, // QUOTES         
    { {     286}, {   94} }, // ESCAPE_SEQUENCE
    { {      46}, {   95} }, // '.'            
    { {     359}, {   96} }, // _single_char   
    { {     356}, {   97} }, // characterclass 
    { {      40}, {   98} }, // '('            
    { {     291}, {   99} }, // CHAR           
    { {     341}, {  100} }, // combi_chars    
    { {     355}, {  101} }, // _cc_set        
    { {      44}, {  102} }, // ','            
    { {      61}, {  103} }, // '='            
    { {      45}, {  104} }, // '-'            
    { {      39}, {  105} }, // '''            
    { {     348}, {  106} }, // _cc_start      
    { {     349}, {  107} }, // _cc_negated    
    { {     287}, {  108} }, // CC_START       
    { {     288}, {  109} }, // CC_NEGATED     
    { {       0}, { -135} },                   
};

SR_ s_86[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -130} }, 
};

SR_ s_87[] =
{
    { { REQ_TOKEN}, {  27} },                   
    { {       366}, { 147} }, // _regex         
    { {       365}, {  85} }, // _regex_unit    
    { {       363}, {  86} }, // _unit          
    { {       360}, {  87} }, // _open_paren    
    { {        94}, {  88} }, // '^'            
    { {        36}, {  89} }, // '$'            
    { {       285}, {  90} }, // DOLLAR         
    { {       282}, {  91} }, // STRING         
    { {       281}, {  92} }, // RAWSTRING      
    { {       283}, {  93} }, // QUOTES         
    { {       286}, {  94} }, // ESCAPE_SEQUENCE
    { {        46}, {  95} }, // '.'            
    { {       359}, {  96} }, // _single_char   
    { {       356}, {  97} }, // characterclass 
    { {        40}, {  98} }, // '('            
    { {       291}, {  99} }, // CHAR           
    { {       341}, { 100} }, // combi_chars    
    { {       355}, { 101} }, // _cc_set        
    { {        44}, { 102} }, // ','            
    { {        61}, { 103} }, // '='            
    { {        45}, { 104} }, // '-'            
    { {        39}, { 105} }, // '''            
    { {       348}, { 106} }, // _cc_start      
    { {       349}, { 107} }, // _cc_negated    
    { {       287}, { 108} }, // CC_START       
    { {       288}, { 109} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR_ s_88[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR_ s_89[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR_ s_90[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR_ s_91[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR_ s_92[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR_ s_93[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -122} }, 
};

SR_ s_94[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR_ s_95[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -124} }, 
};

SR_ s_96[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR_ s_97[] =
{
    { { REQ_DEF}, {    3} },            
    { {     292}, {  148} }, // CC_PLUS 
    { {     293}, {  149} }, // CC_MINUS
    { {       0}, { -126} },            
};

SR_ s_98[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR_ s_99[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR_ s_100[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR_ s_101[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR_ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR_ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR_ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR_ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR_ s_106[] =
{
    { { REQ_TOKEN}, {  35} },                    
    { {       350}, { 150} }, // _cc_end         
    { {       354}, { 151} }, // _cc_contents    
    { {        93}, { 152} }, // ']'             
    { {       353}, { 153} }, // _cc_element     
    { {       352}, { 154} }, // _cc_escape      
    { {       289}, { 155} }, // PREDEFINED_CLASS
    { {       351}, { 156} }, // _cc_literal     
    { {       286}, { 157} }, // ESCAPE_SEQUENCE 
    { {       283}, { 158} }, // QUOTES          
    { {        47}, { 159} }, // '/'             
    { {       124}, { 160} }, // '|'             
    { {        40}, { 161} }, // '('             
    { {        41}, { 162} }, // ')'             
    { {        42}, { 163} }, // '*'             
    { {        43}, { 164} }, // '+'             
    { {        63}, { 165} }, // '?'             
    { {       123}, { 166} }, // '{'             
    { {       125}, { 167} }, // '}'             
    { {        60}, { 168} }, // '<'             
    { {        62}, { 169} }, // '>'             
    { {        91}, { 170} }, // '['             
    { {        46}, { 171} }, // '.'             
    { {        94}, { 172} }, // '^'             
    { {        36}, { 173} }, // '$'             
    { {       285}, { 174} }, // DOLLAR          
    { {       284}, { 175} }, // DECIMAL         
    { {       279}, { 176} }, // IDENTIFIER      
    { {       291}, { 177} }, // CHAR            
    { {       282}, { 178} }, // STRING          
    { {       341}, { 179} }, // combi_chars     
    { {        44}, { 102} }, // ','             
    { {        61}, { 103} }, // '='             
    { {        45}, { 104} }, // '-'             
    { {        39}, { 105} }, // '''             
    { {         0}, {   0} },                    
};

SR_ s_107[] =
{
    { { REQ_TOKEN}, {  35} },                    
    { {       350}, { 180} }, // _cc_end         
    { {       354}, { 181} }, // _cc_contents    
    { {        93}, { 152} }, // ']'             
    { {       353}, { 153} }, // _cc_element     
    { {       352}, { 154} }, // _cc_escape      
    { {       289}, { 155} }, // PREDEFINED_CLASS
    { {       351}, { 156} }, // _cc_literal     
    { {       286}, { 157} }, // ESCAPE_SEQUENCE 
    { {       283}, { 158} }, // QUOTES          
    { {        47}, { 159} }, // '/'             
    { {       124}, { 160} }, // '|'             
    { {        40}, { 161} }, // '('             
    { {        41}, { 162} }, // ')'             
    { {        42}, { 163} }, // '*'             
    { {        43}, { 164} }, // '+'             
    { {        63}, { 165} }, // '?'             
    { {       123}, { 166} }, // '{'             
    { {       125}, { 167} }, // '}'             
    { {        60}, { 168} }, // '<'             
    { {        62}, { 169} }, // '>'             
    { {        91}, { 170} }, // '['             
    { {        46}, { 171} }, // '.'             
    { {        94}, { 172} }, // '^'             
    { {        36}, { 173} }, // '$'             
    { {       285}, { 174} }, // DOLLAR          
    { {       284}, { 175} }, // DECIMAL         
    { {       279}, { 176} }, // IDENTIFIER      
    { {       291}, { 177} }, // CHAR            
    { {       282}, { 178} }, // STRING          
    { {       341}, { 179} }, // combi_chars     
    { {        44}, { 102} }, // ','             
    { {        61}, { 103} }, // '='             
    { {        45}, { 104} }, // '-'             
    { {        39}, { 105} }, // '''             
    { {         0}, {   0} },                    
};

SR_ s_108[] =
{
    { { DEF_RED}, {   2} },               
    { {     347}, { 182} }, // _m_contents
    { {       0}, { -69} },               
};

SR_ s_109[] =
{
    { { DEF_RED}, {   2} },               
    { {     347}, { 183} }, // _m_contents
    { {       0}, { -69} },               
};

SR_ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR_ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR_ s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR_ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR_ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR_ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR_ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR_ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR_ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR_ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR_ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR_ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR_ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_124[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR_ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR_ s_126[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR_ s_127[] =
{
    { { DEF_RED}, {    2} },         
    { {     369}, {  184} }, // reset
    { {       0}, { -141} },         
};

SR_ s_128[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -156} }, 
};

SR_ s_129[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 185} }, // '\x0a'
    { {         0}, {   0} },          
};

SR_ s_130[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -140} }, 
};

SR_ s_131[] =
{
    { { DEF_RED}, {    2} },         
    { {     369}, {  186} }, // reset
    { {       0}, { -141} },         
};

SR_ s_132[] =
{
    { { REQ_TOKEN}, {  29} },                   
    { {       367}, { 187} }, // regexOrEOF     
    { {       366}, {  83} }, // _regex         
    { {       280}, {  84} }, // EOF_PATTERN    
    { {       365}, {  85} }, // _regex_unit    
    { {       363}, {  86} }, // _unit          
    { {       360}, {  87} }, // _open_paren    
    { {        94}, {  88} }, // '^'            
    { {        36}, {  89} }, // '$'            
    { {       285}, {  90} }, // DOLLAR         
    { {       282}, {  91} }, // STRING         
    { {       281}, {  92} }, // RAWSTRING      
    { {       283}, {  93} }, // QUOTES         
    { {       286}, {  94} }, // ESCAPE_SEQUENCE
    { {        46}, {  95} }, // '.'            
    { {       359}, {  96} }, // _single_char   
    { {       356}, {  97} }, // characterclass 
    { {        40}, {  98} }, // '('            
    { {       291}, {  99} }, // CHAR           
    { {       341}, { 100} }, // combi_chars    
    { {       355}, { 101} }, // _cc_set        
    { {        44}, { 102} }, // ','            
    { {        61}, { 103} }, // '='            
    { {        45}, { 104} }, // '-'            
    { {        39}, { 105} }, // '''            
    { {       348}, { 106} }, // _cc_start      
    { {       349}, { 107} }, // _cc_negated    
    { {       287}, { 108} }, // CC_START       
    { {       288}, { 109} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR_ s_133[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        62}, { 188} }, // '>'
    { {         0}, {   0} },       
};

SR_ s_134[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR_ s_135[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 189} }, // ','
    { {       0}, { -66} },       
};

SR_ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR_ s_137[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR_ s_138[] =
{
    { { REQ_TOKEN}, {  27} },                   
    { {       366}, { 190} }, // _regex         
    { {       365}, {  85} }, // _regex_unit    
    { {       363}, {  86} }, // _unit          
    { {       360}, {  87} }, // _open_paren    
    { {        94}, {  88} }, // '^'            
    { {        36}, {  89} }, // '$'            
    { {       285}, {  90} }, // DOLLAR         
    { {       282}, {  91} }, // STRING         
    { {       281}, {  92} }, // RAWSTRING      
    { {       283}, {  93} }, // QUOTES         
    { {       286}, {  94} }, // ESCAPE_SEQUENCE
    { {        46}, {  95} }, // '.'            
    { {       359}, {  96} }, // _single_char   
    { {       356}, {  97} }, // characterclass 
    { {        40}, {  98} }, // '('            
    { {       291}, {  99} }, // CHAR           
    { {       341}, { 100} }, // combi_chars    
    { {       355}, { 101} }, // _cc_set        
    { {        44}, { 102} }, // ','            
    { {        61}, { 103} }, // '='            
    { {        45}, { 104} }, // '-'            
    { {        39}, { 105} }, // '''            
    { {       348}, { 106} }, // _cc_start      
    { {       349}, { 107} }, // _cc_negated    
    { {       287}, { 108} }, // CC_START       
    { {       288}, { 109} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR_ s_139[] =
{
    { { REQ_TOKEN}, {  27} },                   
    { {       366}, { 191} }, // _regex         
    { {       365}, {  85} }, // _regex_unit    
    { {       363}, {  86} }, // _unit          
    { {       360}, {  87} }, // _open_paren    
    { {        94}, {  88} }, // '^'            
    { {        36}, {  89} }, // '$'            
    { {       285}, {  90} }, // DOLLAR         
    { {       282}, {  91} }, // STRING         
    { {       281}, {  92} }, // RAWSTRING      
    { {       283}, {  93} }, // QUOTES         
    { {       286}, {  94} }, // ESCAPE_SEQUENCE
    { {        46}, {  95} }, // '.'            
    { {       359}, {  96} }, // _single_char   
    { {       356}, {  97} }, // characterclass 
    { {        40}, {  98} }, // '('            
    { {       291}, {  99} }, // CHAR           
    { {       341}, { 100} }, // combi_chars    
    { {       355}, { 101} }, // _cc_set        
    { {        44}, { 102} }, // ','            
    { {        61}, { 103} }, // '='            
    { {        45}, { 104} }, // '-'            
    { {        39}, { 105} }, // '''            
    { {       348}, { 106} }, // _cc_start      
    { {       349}, { 107} }, // _cc_negated    
    { {       287}, { 108} }, // CC_START       
    { {       288}, { 109} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR_ s_140[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {       358}, { 192} }, // _interval
    { {       357}, { 193} }, // _decimal 
    { {       284}, { 194} }, // DECIMAL  
    { {         0}, {   0} },             
};

SR_ s_141[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR_ s_142[] =
{
    { { REQ_DEF}, {   16} },                  
    { {     362}, {  140} }, // _open_curly   
    { {     364}, {  141} }, // _quantifier   
    { {     365}, {  142} }, // _regex_unit   
    { {     123}, {  143} }, // '{'           
    { {      42}, {  144} }, // '*'           
    { {      43}, {  145} }, // '+'           
    { {      63}, {  146} }, // '?'           
    { {     363}, {   86} }, // _unit         
    { {     360}, {   87} }, // _open_paren   
    { {     359}, {   96} }, // _single_char  
    { {     356}, {   97} }, // characterclass
    { {     341}, {  100} }, // combi_chars   
    { {     355}, {  101} }, // _cc_set       
    { {     348}, {  106} }, // _cc_start     
    { {     349}, {  107} }, // _cc_negated   
    { {       0}, { -134} },                  
};

SR_ s_143[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR_ s_144[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -127} }, 
};

SR_ s_145[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR_ s_146[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR_ s_147[] =
{
    { { REQ_TOKEN}, {   5} },                
    { {       361}, { 195} }, // _close_paren
    { {       124}, { 138} }, // '|'         
    { {        47}, { 139} }, // '/'         
    { {        41}, { 196} }, // ')'         
    { {         0}, {   0} },                
};

SR_ s_148[] =
{
    { { REQ_TOKEN}, {   7} },                  
    { {       356}, { 197} }, // characterclass
    { {       355}, { 101} }, // _cc_set       
    { {       348}, { 106} }, // _cc_start     
    { {       349}, { 107} }, // _cc_negated   
    { {       287}, { 108} }, // CC_START      
    { {       288}, { 109} }, // CC_NEGATED    
    { {         0}, {   0} },                  
};

SR_ s_149[] =
{
    { { REQ_TOKEN}, {   7} },                  
    { {       356}, { 198} }, // characterclass
    { {       355}, { 101} }, // _cc_set       
    { {       348}, { 106} }, // _cc_start     
    { {       349}, { 107} }, // _cc_negated   
    { {       287}, { 108} }, // CC_START      
    { {       288}, { 109} }, // CC_NEGATED    
    { {         0}, {   0} },                  
};

SR_ s_150[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -101} }, 
};

SR_ s_151[] =
{
    { { REQ_TOKEN}, {  34} },                    
    { {       350}, { 199} }, // _cc_end         
    { {       353}, { 200} }, // _cc_element     
    { {        93}, { 152} }, // ']'             
    { {       352}, { 154} }, // _cc_escape      
    { {       289}, { 155} }, // PREDEFINED_CLASS
    { {       351}, { 156} }, // _cc_literal     
    { {       286}, { 157} }, // ESCAPE_SEQUENCE 
    { {       283}, { 158} }, // QUOTES          
    { {        47}, { 159} }, // '/'             
    { {       124}, { 160} }, // '|'             
    { {        40}, { 161} }, // '('             
    { {        41}, { 162} }, // ')'             
    { {        42}, { 163} }, // '*'             
    { {        43}, { 164} }, // '+'             
    { {        63}, { 165} }, // '?'             
    { {       123}, { 166} }, // '{'             
    { {       125}, { 167} }, // '}'             
    { {        60}, { 168} }, // '<'             
    { {        62}, { 169} }, // '>'             
    { {        91}, { 170} }, // '['             
    { {        46}, { 171} }, // '.'             
    { {        94}, { 172} }, // '^'             
    { {        36}, { 173} }, // '$'             
    { {       285}, { 174} }, // DOLLAR          
    { {       284}, { 175} }, // DECIMAL         
    { {       279}, { 176} }, // IDENTIFIER      
    { {       291}, { 177} }, // CHAR            
    { {       282}, { 178} }, // STRING          
    { {       341}, { 179} }, // combi_chars     
    { {        44}, { 102} }, // ','             
    { {        61}, { 103} }, // '='             
    { {        45}, { 104} }, // '-'             
    { {        39}, { 105} }, // '''             
    { {         0}, {   0} },                    
};

SR_ s_152[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR_ s_153[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -100} }, 
};

SR_ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -96} }, 
};

SR_ s_155[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -97} }, 
};

SR_ s_156[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -98} }, 
};

SR_ s_157[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -94} }, 
};

SR_ s_158[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -95} }, 
};

SR_ s_159[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR_ s_160[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR_ s_161[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR_ s_162[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR_ s_163[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR_ s_164[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR_ s_165[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR_ s_166[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR_ s_167[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -81} }, 
};

SR_ s_168[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR_ s_169[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -83} }, 
};

SR_ s_170[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -84} }, 
};

SR_ s_171[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -85} }, 
};

SR_ s_172[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -86} }, 
};

SR_ s_173[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -87} }, 
};

SR_ s_174[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -88} }, 
};

SR_ s_175[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -89} }, 
};

SR_ s_176[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -90} }, 
};

SR_ s_177[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -91} }, 
};

SR_ s_178[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -92} }, 
};

SR_ s_179[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -93} }, 
};

SR_ s_180[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -102} }, 
};

SR_ s_181[] =
{
    { { REQ_TOKEN}, {  34} },                    
    { {       350}, { 201} }, // _cc_end         
    { {       353}, { 200} }, // _cc_element     
    { {        93}, { 152} }, // ']'             
    { {       352}, { 154} }, // _cc_escape      
    { {       289}, { 155} }, // PREDEFINED_CLASS
    { {       351}, { 156} }, // _cc_literal     
    { {       286}, { 157} }, // ESCAPE_SEQUENCE 
    { {       283}, { 158} }, // QUOTES          
    { {        47}, { 159} }, // '/'             
    { {       124}, { 160} }, // '|'             
    { {        40}, { 161} }, // '('             
    { {        41}, { 162} }, // ')'             
    { {        42}, { 163} }, // '*'             
    { {        43}, { 164} }, // '+'             
    { {        63}, { 165} }, // '?'             
    { {       123}, { 166} }, // '{'             
    { {       125}, { 167} }, // '}'             
    { {        60}, { 168} }, // '<'             
    { {        62}, { 169} }, // '>'             
    { {        91}, { 170} }, // '['             
    { {        46}, { 171} }, // '.'             
    { {        94}, { 172} }, // '^'             
    { {        36}, { 173} }, // '$'             
    { {       285}, { 174} }, // DOLLAR          
    { {       284}, { 175} }, // DECIMAL         
    { {       279}, { 176} }, // IDENTIFIER      
    { {       291}, { 177} }, // CHAR            
    { {       282}, { 178} }, // STRING          
    { {       341}, { 179} }, // combi_chars     
    { {        44}, { 102} }, // ','             
    { {        61}, { 103} }, // '='             
    { {        45}, { 104} }, // '-'             
    { {        39}, { 105} }, // '''             
    { {         0}, {   0} },                    
};

SR_ s_182[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR_ s_183[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR_ s_184[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -161} }, 
};

SR_ s_185[] =
{
    { { DEF_RED}, {    2} },         
    { {     369}, {  202} }, // reset
    { {       0}, { -141} },         
};

SR_ s_186[] =
{
    { { DEF_RED}, {    2} },                            
    { {     373}, {  203} }, // _opt_msCompound_nl_rules
    { {       0}, { -148} },                            
};

SR_ s_187[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -151} }, 
};

SR_ s_188[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR_ s_189[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       342}, { 204} }, // _ms_name  
    { {       315}, { 137} }, // identifier
    { {       279}, {  47} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR_ s_190[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -136} }, 
};

SR_ s_191[] =
{
    { { REQ_DEF}, {    2} },       
    { {     124}, {  138} }, // '|'
    { {       0}, { -137} },       
};

SR_ s_192[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 205} }, // '}'
    { {         0}, {   0} },       
};

SR_ s_193[] =
{
    { { REQ_DEF}, {    2} },       
    { {      44}, {  206} }, // ','
    { {       0}, { -109} },       
};

SR_ s_194[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR_ s_195[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -133} }, 
};

SR_ s_196[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR_ s_197[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -105} }, 
};

SR_ s_198[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -106} }, 
};

SR_ s_199[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR_ s_200[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -99} }, 
};

SR_ s_201[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR_ s_202[] =
{
    { { REQ_TOKEN}, {  34} },                   
    { {       376}, { 207} }, // _optMs_rule    
    { {       375}, {  79} }, // _optMs_regex   
    { {       346}, { 208} }, // ms_spec        
    { {       367}, {  81} }, // regexOrEOF     
    { {       345}, {  80} }, // _ms_angular    
    { {       366}, {  83} }, // _regex         
    { {       280}, {  84} }, // EOF_PATTERN    
    { {        60}, {  82} }, // '<'            
    { {       365}, {  85} }, // _regex_unit    
    { {       363}, {  86} }, // _unit          
    { {       360}, {  87} }, // _open_paren    
    { {        94}, {  88} }, // '^'            
    { {        36}, {  89} }, // '$'            
    { {       285}, {  90} }, // DOLLAR         
    { {       282}, {  91} }, // STRING         
    { {       281}, {  92} }, // RAWSTRING      
    { {       283}, {  93} }, // QUOTES         
    { {       286}, {  94} }, // ESCAPE_SEQUENCE
    { {        46}, {  95} }, // '.'            
    { {       359}, {  96} }, // _single_char   
    { {       356}, {  97} }, // characterclass 
    { {        40}, {  98} }, // '('            
    { {       291}, {  99} }, // CHAR           
    { {       341}, { 100} }, // combi_chars    
    { {       355}, { 101} }, // _cc_set        
    { {        44}, { 102} }, // ','            
    { {        61}, { 103} }, // '='            
    { {        45}, { 104} }, // '-'            
    { {        39}, { 105} }, // '''            
    { {       348}, { 106} }, // _cc_start      
    { {       349}, { 107} }, // _cc_negated    
    { {       287}, { 108} }, // CC_START       
    { {       288}, { 109} }, // CC_NEGATED     
    { {         0}, {   0} },                   
};

SR_ s_203[] =
{
    { { REQ_DEF}, {   33} },                          
    { {     125}, {  209} }, // '}'                   
    { {     372}, {  210} }, // _msCompound_nl_rule   
    { {     371}, {  211} }, // _msCompound_rule      
    { {     370}, {  212} }, // _msCompound_regex_list
    { {     367}, {  213} }, // regexOrEOF            
    { {     366}, {   83} }, // _regex                
    { {     280}, {   84} }, // EOF_PATTERN           
    { {     365}, {   85} }, // _regex_unit           
    { {     363}, {   86} }, // _unit                 
    { {     360}, {   87} }, // _open_paren           
    { {      94}, {   88} }, // '^'                   
    { {      36}, {   89} }, // '$'                   
    { {     285}, {   90} }, // DOLLAR                
    { {     282}, {   91} }, // STRING                
    { {     281}, {   92} }, // RAWSTRING             
    { {     283}, {   93} }, // QUOTES                
    { {     286}, {   94} }, // ESCAPE_SEQUENCE       
    { {      46}, {   95} }, // '.'                   
    { {     359}, {   96} }, // _single_char          
    { {     356}, {   97} }, // characterclass        
    { {      40}, {   98} }, // '('                   
    { {     291}, {   99} }, // CHAR                  
    { {     341}, {  100} }, // combi_chars           
    { {     355}, {  101} }, // _cc_set               
    { {      44}, {  102} }, // ','                   
    { {      61}, {  103} }, // '='                   
    { {      45}, {  104} }, // '-'                   
    { {      39}, {  105} }, // '''                   
    { {     348}, {  106} }, // _cc_start             
    { {     349}, {  107} }, // _cc_negated           
    { {     287}, {  108} }, // CC_START              
    { {     288}, {  109} }, // CC_NEGATED            
    { {       0}, { -144} },                          
};

SR_ s_204[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR_ s_205[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR_ s_206[] =
{
    { { REQ_DEF}, {    3} },            
    { {     357}, {  214} }, // _decimal
    { {     284}, {  194} }, // DECIMAL 
    { {       0}, { -111} },            
};

SR_ s_207[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -153} }, 
};

SR_ s_208[] =
{
    { { DEF_RED}, {    2} },         
    { {     369}, {  132} }, // reset
    { {       0}, { -141} },         
};

SR_ s_209[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -150} }, 
};

SR_ s_210[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -149} }, 
};

SR_ s_211[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 215} }, // '\x0a'
    { {         0}, {   0} },          
};

SR_ s_212[] =
{
    { { REQ_DEF}, {    4} },          
    { {     368}, {  216} }, // action
    { {     290}, {  217} }, // ORNL  
    { {     278}, {  130} }, // BLOCK 
    { {       0}, { -145} },          
};

SR_ s_213[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -143} }, 
};

SR_ s_214[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR_ s_215[] =
{
    { { DEF_RED}, {    2} },         
    { {     369}, {  218} }, // reset
    { {       0}, { -141} },         
};

SR_ s_216[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -146} }, 
};

SR_ s_217[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {        10}, { 219} }, // '\x0a'
    { {         0}, {   0} },          
};

SR_ s_218[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -147} }, 
};

SR_ s_219[] =
{
    { { DEF_RED}, {    2} },         
    { {     369}, {  220} }, // reset
    { {       0}, { -141} },         
};

SR_ s_220[] =
{
    { { REQ_TOKEN}, {  30} },                          
    { {       370}, { 221} }, // _msCompound_regex_list
    { {       367}, { 213} }, // regexOrEOF            
    { {       366}, {  83} }, // _regex                
    { {       280}, {  84} }, // EOF_PATTERN           
    { {       365}, {  85} }, // _regex_unit           
    { {       363}, {  86} }, // _unit                 
    { {       360}, {  87} }, // _open_paren           
    { {        94}, {  88} }, // '^'                   
    { {        36}, {  89} }, // '$'                   
    { {       285}, {  90} }, // DOLLAR                
    { {       282}, {  91} }, // STRING                
    { {       281}, {  92} }, // RAWSTRING             
    { {       283}, {  93} }, // QUOTES                
    { {       286}, {  94} }, // ESCAPE_SEQUENCE       
    { {        46}, {  95} }, // '.'                   
    { {       359}, {  96} }, // _single_char          
    { {       356}, {  97} }, // characterclass        
    { {        40}, {  98} }, // '('                   
    { {       291}, {  99} }, // CHAR                  
    { {       341}, { 100} }, // combi_chars           
    { {       355}, { 101} }, // _cc_set               
    { {        44}, { 102} }, // ','                   
    { {        61}, { 103} }, // '='                   
    { {        45}, { 104} }, // '-'                   
    { {        39}, { 105} }, // '''                   
    { {       348}, { 106} }, // _cc_start             
    { {       349}, { 107} }, // _cc_negated           
    { {       287}, { 108} }, // CC_START              
    { {       288}, { 109} }, // CC_NEGATED            
    { {         0}, {   0} },                          
};

SR_ s_221[] =
{
    { { REQ_DEF}, {    1} }, 
    { {       0}, { -142} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,  s_217,  s_218,  s_219,
  s_220,  s_221,
};

typedef std::unordered_map<int, char const *> SMap;
typedef SMap::value_type SMapVal;

SMapVal s_symArr[] =
{
    SMapVal(-2, "Reserved_::UNDETERMINED_"),  // predefined symbols
    SMapVal(-1, "Reserved_::EOF_"),
    SMapVal(256, "errTok_"),

    SMapVal(257, "EXCL_START_CONDITION"),
    SMapVal(258, "INCL_START_CONDITION"),
    SMapVal(259, "SECTION_DELIMITER"),
    SMapVal(260, "BASECLASSHEADER"),
    SMapVal(261, "CASEINSENSITIVE"),
    SMapVal(262, "CLASSHEADER"),
    SMapVal(263, "CLASSNAME"),
    SMapVal(264, "DEBUG"),
    SMapVal(265, "FILENAMES"),
    SMapVal(266, "IMPLEMENTATIONHEADER"),
    SMapVal(267, "INPUTIMPLEMENTATION"),
    SMapVal(268, "INPUTINTERFACE"),
    SMapVal(269, "INTERACTIVE"),
    SMapVal(270, "LEXFUNCTIONNAME"),
    SMapVal(271, "LEXSOURCE"),
    SMapVal(272, "NAMESPACE"),
    SMapVal(273, "NOLINES"),
    SMapVal(274, "PRINT"),
    SMapVal(275, "SKELETON_DIRECTORY"),
    SMapVal(276, "STARTCONDITION"),
    SMapVal(277, "TARGET_DIRECTORY"),
    SMapVal(278, "BLOCK"),
    SMapVal(279, "IDENTIFIER"),
    SMapVal(280, "EOF_PATTERN"),
    SMapVal(281, "RAWSTRING"),
    SMapVal(282, "STRING"),
    SMapVal(283, "QUOTES"),
    SMapVal(284, "DECIMAL"),
    SMapVal(285, "DOLLAR"),
    SMapVal(286, "ESCAPE_SEQUENCE"),
    SMapVal(287, "CC_START"),
    SMapVal(288, "CC_NEGATED"),
    SMapVal(289, "PREDEFINED_CLASS"),
    SMapVal(290, "ORNL"),
    SMapVal(291, "CHAR"),
    SMapVal(292, "CC_PLUS"),
    SMapVal(293, "CC_MINUS"),
    SMapVal(311, "input"),
    SMapVal(312, "opt_directives"),
    SMapVal(313, "section_delimiter"),
    SMapVal(314, "rules"),
    SMapVal(315, "identifier"),
    SMapVal(316, "_sc_name"),
    SMapVal(317, "_start_condition_type"),
    SMapVal(318, "_start_condition_names"),
    SMapVal(319, "_start_condition_directive"),
    SMapVal(320, "_name_def"),
    SMapVal(321, "_stringType"),
    SMapVal(322, "_name_definition"),
    SMapVal(323, "_directive"),
    SMapVal(324, "option"),
    SMapVal(325, "_directive_line"),
    SMapVal(326, "_baseclassheader"),
    SMapVal(327, "_classheader"),
    SMapVal(328, "_classname"),
    SMapVal(329, "_filenames"),
    SMapVal(330, "_implementationheader"),
    SMapVal(331, "_inputinterface"),
    SMapVal(332, "_inputimplementation"),
    SMapVal(333, "_lexfunctionname"),
    SMapVal(334, "_lexsource"),
    SMapVal(335, "_namespace"),
    SMapVal(336, "_skeleton_directory"),
    SMapVal(337, "_startcondition_name"),
    SMapVal(338, "_target_directory"),
    SMapVal(339, "_stringOrIdent"),
    SMapVal(340, "_opt_is"),
    SMapVal(341, "combi_chars"),
    SMapVal(342, "_ms_name"),
    SMapVal(343, "_ms_name_list"),
    SMapVal(344, "_ms_specs"),
    SMapVal(345, "_ms_angular"),
    SMapVal(346, "ms_spec"),
    SMapVal(347, "_m_contents"),
    SMapVal(348, "_cc_start"),
    SMapVal(349, "_cc_negated"),
    SMapVal(350, "_cc_end"),
    SMapVal(351, "_cc_literal"),
    SMapVal(352, "_cc_escape"),
    SMapVal(353, "_cc_element"),
    SMapVal(354, "_cc_contents"),
    SMapVal(355, "_cc_set"),
    SMapVal(356, "characterclass"),
    SMapVal(357, "_decimal"),
    SMapVal(358, "_interval"),
    SMapVal(359, "_single_char"),
    SMapVal(360, "_open_paren"),
    SMapVal(361, "_close_paren"),
    SMapVal(362, "_open_curly"),
    SMapVal(363, "_unit"),
    SMapVal(364, "_quantifier"),
    SMapVal(365, "_regex_unit"),
    SMapVal(366, "_regex"),
    SMapVal(367, "regexOrEOF"),
    SMapVal(368, "action"),
    SMapVal(369, "reset"),
    SMapVal(370, "_msCompound_regex_list"),
    SMapVal(371, "_msCompound_rule"),
    SMapVal(372, "_msCompound_nl_rule"),
    SMapVal(373, "_opt_msCompound_nl_rules"),
    SMapVal(374, "msCompound"),
    SMapVal(375, "_optMs_regex"),
    SMapVal(376, "_optMs_rule"),
    SMapVal(377, "optMs_rule"),
    SMapVal(378, "_rule_def"),
    SMapVal(379, "_rule"),
    SMapVal(380, "input_$"),
};

SMap s_symbol
(
    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
);

} // anonymous namespace ends



// $insert polymorphicCode
namespace Meta_
{

size_t const *t_nErrors;
// $insert idoftag
char const *idOfTag_[] = {
    "INTERVAL",
    "VECTOR",
    "PATTERN",
    "TEXTTYPE",
    "CHARCLASS",
    "STRING",
    "<undefined>"
};

size_t const *s_nErrors_;

Base::~Base()
{}

}   // namespace Meta_

// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
    Meta_::t_nErrors = &d_nErrors_;
}

// base/clearin
void ParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions
// $insert debugfunctions
std::ostringstream ParserBase::s_out_;
std::ostream &ParserBase::dflush_(std::ostream &out)
{
    std::ostringstream &s_out_ = dynamic_cast<std::ostringstream &>(out);

    std::cout << "    " << s_out_.str() << std::flush;
    s_out_.clear();
    s_out_.str("");
    return out;
}

std::string ParserBase::stype_(char const *pre, 
                 STYPE_ const &semVal, char const *post) const
{
    return "";
}
std::string ParserBase::symbol_(int value) const
{
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << '\'' << it->second << '\'';
    else if (isprint(value))
        ostr << '`' << static_cast<char>(value) << "' (" << value << ')';
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << '\'';
    return ostr.str();
}



void ParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            // $insert debug
            if (d_debug_)
                s_out_ <<  "\nLOOKUP: [" << state_() << ", " << symbol_(d_token) << "] -> default reduce using rule " << -sr->d_action << '\n' << dflush_;
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;

// $insert debuglookup
    if (d_debug_)
    {
        s_out_ <<  "encountered " << symbol_(token_()) << " in state " <<
                    state_() << ": ";
    
        if (action < 0)             // a reduction was found
            s_out_ << ": reducing by rule " << -action;
        else if (action == 0)
            s_out_ <<  "ACCEPT";
        else
            s_out_ <<  "next state: " << action;
    
        s_out_ << '\n' << dflush_;
    }

    return action;
}

// base/pop
void ParserBase::pop_(size_t count)
{
    // $insert debug
    if (d_debug_)
        s_out_ <<  "pop " << count << " elements from the stack having size " << stackSize_() << '\n' << dflush_;
    if (d_stackIdx < static_cast<int>(count))
    {
        // $insert debug
        if (d_debug_)
            s_out_ <<  "Terminating parse(): state stack underflow  at token " << symbol_(d_token) << '\n' << dflush_;
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

    // $insert debug
    if (d_debug_)
        s_out_ <<  "next: [" << state_() << ", " << symbol_(d_token) << ']' << stype_(". Semantic: ", vs_(0)) << '\n' << dflush_;
}

// base/poptoken
void ParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    // $insert debug
    if (d_debug_)
        s_out_ <<   "\nPUSH 0 (initializing the state stack)" << '\n' << dflush_;
    }
    else
    {
    // $insert debug
    if (d_debug_)
        s_out_ <<   "\nPUSH:   [" << (d_vsp - 1)->first << ", " << symbol_(d_token) << "] -> " << state << stype_(" (semantic TOS = ", d_val_, ")") << '\n' << dflush_;
    }
}

// base/pushtoken
void ParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    // $insert debug
    if (d_debug_)
        s_out_ <<  "rule " << (&pi - s_productionInfo) << ": pop " << pi.d_size << " elements. Next will be: [" << d_stateStack[d_stackIdx - pi.d_size].first << ", " << symbol_(d_token) << ']' << '\n' << dflush_;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        // $insert debug
        if (d_debug_)
            s_out_ <<  "ERROR RECOVERED: next state " << action << '\n' << dflush_;
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery_()
{
    int lastToken = d_token;                    // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken_(errTok_);                       // specify errTok_ as next token
    push_(lookup_());                         // push the error state

    d_token = lastToken;                        // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)

    // $insert debug
    if (d_debug_)
        s_out_ <<  "\nERROR:  [" << top_() << ", " << symbol_(token_()) << "] -> ??. Errors: " << (d_nErrors_ + 1) << '\n' << dflush_;


    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        // $insert debug
        if (d_debug_)
            s_out_ <<  "pop state: " << top_() << " (not an ERROR state)" << '\n' << dflush_;
        pop_();
    }
    // $insert debug
    if (d_debug_)
        s_out_ <<  "Reached ERROR state " << top_() << '\n' << dflush_;

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    // $insert debug
    if (d_debug_)
        s_out_ <<  "execute action " << production << " ..." << '\n' << dflush_;
// $insert executeactioncases

    if (d_actionCases_)
        s_out_ << "executeAction case " << production << '\n' << dflush_;
    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 89 "grammar"
        {
         d_nLOPstartConditions = d_rules.startConditions().size();
         d_rules.setEndUserSC();
         reset();
         }
        break;

        case 3:
#line 98 "grammar"
        {
         d_val_ = d_matched;
         }
        break;

        case 4:
#line 2 "inc/directives"
        {
         d_expect = "list of start condition names";
         }
        break;

        case 5:
#line 10 "inc/directives"
        {
         d_rules.setType(StartConditions::INCLUSIVE);
         }
        break;

        case 6:
#line 16 "inc/directives"
        {
         d_rules.setType(StartConditions::EXCLUSIVE);
         }
        break;

        case 7:
#line 23 "inc/directives"
        {
         d_rules.defineStartCondition(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 8:
#line 28 "inc/directives"
        {
         d_rules.defineStartCondition(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 10:
#line 40 "inc/directives"
        {
         d_scanner.newDefinition(); 
         d_val_ = d_scanner.matched();
         }
        break;

        case 11:
#line 48 "inc/directives"
        {
         d_val_ = TextType::STRING;
         }
        break;

        case 12:
#line 53 "inc/directives"
        {
         d_val_ = rawString();
         }
        break;

        case 13:
#line 60 "inc/directives"
        {
         d_scanner.addDefinition(vs_(-1).get<Tag_::STRING>(), vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 22:
#line 3 "inc/options"
        {
         d_expect = "scanner base class header file name";
         }
        break;

        case 23:
#line 10 "inc/options"
        {
         d_expect = "scanner class header file name";
         }
        break;

        case 24:
#line 17 "inc/options"
        {
         d_expect = "class name";
         }
        break;

        case 25:
#line 24 "inc/options"
        {
         d_expect = "generic filenames specification";
         }
        break;

        case 26:
#line 31 "inc/options"
        {
         d_expect = "implementation header file name";
         }
        break;

        case 27:
#line 38 "inc/options"
        {
         d_expect = "name of the file holding Input's interface";
         }
        break;

        case 28:
#line 45 "inc/options"
        {
         d_expect = "name of the file holding Input's implementations";
         }
        break;

        case 29:
#line 52 "inc/options"
        {
         d_expect = "name of the lex() function";
         }
        break;

        case 30:
#line 59 "inc/options"
        {
         d_expect = "source file name of the lex function";
         }
        break;

        case 31:
#line 66 "inc/options"
        {
         d_expect = "name of the namespace to use";
         }
        break;

        case 32:
#line 73 "inc/options"
        {
         d_expect = "directory name of the flexc++ skeleton files";
         }
        break;

        case 33:
#line 80 "inc/options"
        {
         d_expect = "start-condition enum name";
         }
        break;

        case 34:
#line 87 "inc/options"
        {
         d_expect = "target directory name for generated files";
         }
        break;

        case 35:
#line 94 "inc/options"
        {
         d_val_ = TextType::STRING;
         }
        break;

        case 36:
#line 99 "inc/options"
        {
         d_val_ = TextType::IDENT;
         }
        break;

        case 37:
#line 104 "inc/options"
        {
         d_val_ = rawString();
         }
        break;

        case 40:
#line 117 "inc/options"
        {
         d_options.setInputInterfacePath(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 41:
#line 122 "inc/options"
        {
         d_options.setInputImplementationPath(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 42:
#line 127 "inc/options"
        {
         d_options.setClassName(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 43:
#line 132 "inc/options"
        {
         d_options.setFilenames(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 44:
#line 137 "inc/options"
        {
         d_options.setLexFunctionName(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 45:
#line 142 "inc/options"
        {
         d_options.setBaseClassHeader(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 46:
#line 147 "inc/options"
        {
         d_options.setClassHeader(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 47:
#line 152 "inc/options"
        {
         d_options.setImplementationHeader(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 48:
#line 157 "inc/options"
        {
         d_options.setLexSource(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 49:
#line 162 "inc/options"
        {
         d_options.setSkeletonDirectory(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 50:
#line 167 "inc/options"
        {
         d_options.setStartConditionName(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 51:
#line 172 "inc/options"
        {
         d_options.setTargetDirectory(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 52:
#line 177 "inc/options"
        {
         d_options.setNameSpace(vs_(0).get<Tag_::TEXTTYPE>());
         }
        break;

        case 53:
#line 182 "inc/options"
        {
         d_options.setCaseInsensitive();
         }
        break;

        case 54:
#line 187 "inc/options"
        {
         d_options.setInteractive();
         }
        break;

        case 55:
#line 192 "inc/options"
        {
         d_options.setPrint();
         }
        break;

        case 56:
#line 197 "inc/options"
        {
         d_options.setLines(false);
         }
        break;

        case 57:
#line 202 "inc/options"
        {
         d_options.setDebug();
         }
        break;

        case 62:
#line 3 "inc/msspec"
        {
         d_rules.addStartCondition(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 65:
#line 16 "inc/msspec"
        { 
         d_rules.useAll();
         }
        break;

        case 67:
#line 25 "inc/msspec"
        {
         d_scanner.acceptMulti();
         d_scanner.forceCaseSensitive();
         }
        break;

        case 68:
#line 33 "inc/msspec"
        {
         d_scanner.ignoreWS();
         d_scanner.multiAsChar();
         }
        break;

        case 69:
#line 2 "inc/characterclass"
        {
         d_expect = "character class";
         }
        break;

        case 70:
#line 10 "inc/characterclass"
        {
         d_val_ = CharClass(d_matched, 1); 
         }
        break;

        case 71:
#line 18 "inc/characterclass"
        { 
         d_val_ = CharClass(d_matched, 2); 
         }
        break;

        case 72:
#line 25 "inc/characterclass"
        {
         d_expect = "pattern or action block";
         }
        break;

        case 96:
#line 83 "inc/characterclass"
        {
         d_val_ = CharClass::chars(d_matched);
         }
        break;

        case 97:
#line 88 "inc/characterclass"
        {
         d_val_ = CharClass::predefined(d_matched);
         }
        break;

        case 98:
#line 93 "inc/characterclass"
        {
         d_val_ = CharClass::chars(d_matched);
         }
        break;

        case 99:
#line 100 "inc/characterclass"
        {
         d_val_ = vs_(-1).get<Tag_::VECTOR>();
         d_val_.get<Tag_::VECTOR>().push_back(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 100:
#line 106 "inc/characterclass"
        {
         d_val_ = vector<string>(1, vs_(0).get<Tag_::STRING>());
         }
        break;

        case 101:
#line 113 "inc/characterclass"
        {
         d_val_ = vs_(-1).get<Tag_::CHARCLASS>();
         }
        break;

        case 102:
#line 118 "inc/characterclass"
        {
         d_val_ = vs_(-1).get<Tag_::CHARCLASS>();
         d_val_.get<Tag_::CHARCLASS>().negate();
         }
        break;

        case 103:
#line 124 "inc/characterclass"
        {
         d_val_ = vs_(-2).get<Tag_::CHARCLASS>();
         d_val_.get<Tag_::CHARCLASS>().append(vs_(-1).get<Tag_::VECTOR>());
         }
        break;

        case 104:
#line 130 "inc/characterclass"
        {
         d_val_ = vs_(-2).get<Tag_::CHARCLASS>();
         d_val_.get<Tag_::CHARCLASS>().negate(vs_(-1).get<Tag_::VECTOR>());
         }
        break;

        case 105:
#line 138 "inc/characterclass"
        {
         d_val_ = CharClass::unite(vs_(-2).get<Tag_::CHARCLASS>(), vs_(0).get<Tag_::CHARCLASS>());
         }
        break;

        case 106:
#line 143 "inc/characterclass"
        {
         d_val_ = CharClass::difference(vs_(-2).get<Tag_::CHARCLASS>(), vs_(0).get<Tag_::CHARCLASS>());
         }
        break;

        case 107:
#line 148 "inc/characterclass"
        {
         d_val_ = vs_(0).get<Tag_::CHARCLASS>();
         }
        break;

        case 108:
#line 3 "inc/regexoreof"
        {
         d_val_ = d_matched;
         }
        break;

        case 109:
#line 10 "inc/regexoreof"
        {
         d_val_ = Interval::exact(vs_(0).get<Tag_::STRING>());
         }
        break;

        case 110:
#line 15 "inc/regexoreof"
        {
         d_val_ = Interval::range(vs_(-2).get<Tag_::STRING>(), vs_(0).get<Tag_::STRING>());
         }
        break;

        case 111:
#line 20 "inc/regexoreof"
        {
         d_val_ = Interval::lowerBound(vs_(-1).get<Tag_::STRING>());
         }
        break;

        case 114:
#line 33 "inc/regexoreof"
        {
         ++d_parentheses;
         }
        break;

        case 115:
#line 40 "inc/regexoreof"
        {
         --d_parentheses;
         }
        break;

        case 116:
#line 47 "inc/regexoreof"
        {
         d_scanner.acceptMulti();
         }
        break;

        case 117:
#line 54 "inc/regexoreof"
        {
         d_val_ = boln();
         }
        break;

        case 118:
#line 59 "inc/regexoreof"
        {
         d_val_ = dollar();
         }
        break;

        case 119:
#line 64 "inc/regexoreof"
        {
         d_val_ = eolnDollar();
         }
        break;

        case 120:
#line 69 "inc/regexoreof"
        {
         d_val_ = str();
         }
        break;

        case 121:
#line 74 "inc/regexoreof"
        {
         d_val_ = rawText(d_scanner.rawStringContents());
         }
        break;

        case 122:
#line 79 "inc/regexoreof"
        { 
         d_val_ = quotes();
         }
        break;

        case 123:
#line 84 "inc/regexoreof"
        {
         d_val_ = escape();
         }
        break;

        case 124:
#line 89 "inc/regexoreof"
        {
         d_val_ = Pattern::dot(d_states);
         }
        break;

        case 125:
#line 94 "inc/regexoreof"
        {
         d_val_ = rawText();
         }
        break;

        case 126:
#line 99 "inc/regexoreof"
        {
         d_val_ = Pattern::characterClass(d_states, vs_(0).get<Tag_::CHARCLASS>());
         }
        break;

        case 130:
#line 114 "inc/regexoreof"
        {
         Options::regexCall("unit");
         d_val_ = vs_(0).get<Tag_::PATTERN>(); 
         }
        break;

        case 131:
#line 120 "inc/regexoreof"
        {
         d_val_ = interval(vs_(-3).get<Tag_::PATTERN>(), vs_(-1).get<Tag_::INTERVAL>());
         }
        break;

        case 132:
#line 125 "inc/regexoreof"
        {
         d_val_ = Pattern::quantifier(d_states, vs_(-1).get<Tag_::PATTERN>(), d_matched[0]);
         }
        break;

        case 133:
#line 130 "inc/regexoreof"
        {
         d_val_ = vs_(-1).get<Tag_::PATTERN>();
         }
        break;

        case 134:
#line 135 "inc/regexoreof"
        {
         d_val_ = Pattern::concatenate(d_states, vs_(-1).get<Tag_::PATTERN>(), vs_(0).get<Tag_::PATTERN>());
         }
        break;

        case 135:
#line 147 "inc/regexoreof"
        {
         Options::regexCall("regex-unit");
         d_val_ = vs_(0).get<Tag_::PATTERN>();
         }
        break;

        case 136:
#line 153 "inc/regexoreof"
        { 
         d_val_ = Pattern::alternatives(d_states, vs_(-2).get<Tag_::PATTERN>(), vs_(0).get<Tag_::PATTERN>());
         }
        break;

        case 137:
#line 158 "inc/regexoreof"
        {
         d_val_ = lookahead(vs_(-2).get<Tag_::PATTERN>(), vs_(0).get<Tag_::PATTERN>());
         }
        break;

        case 138:
#line 165 "inc/regexoreof"
        {
         d_val_ = vs_(0).get<Tag_::PATTERN>();
         }
        break;

        case 139:
#line 170 "inc/regexoreof"
        {
         d_val_ = Pattern::eof(d_states);
         }
        break;

        case 140:
#line 6 "inc/action"
        {
         block(); 
         }
        break;

        case 141:
#line 2 "inc/reset"
        {
         reset();
         }
        break;

        case 142:
#line 5 "inc/mscompound"
        {
         orAction();
         }
        break;

        case 143:
#line 10 "inc/mscompound"
        {
         addRule(vs_(0).get<Tag_::PATTERN>());
         }
        break;

        case 145:
#line 21 "inc/mscompound"
        {
         noActions();
         }
        break;

        case 146:
#line 26 "inc/mscompound"
        {
         assignBlock();
         }
        break;

        case 150:
#line 43 "inc/mscompound"
        { 
         d_rules.resetStartConditions();
         }
        break;

        case 151:
#line 4 "inc/optmsrule"
        {
         d_val_ = vs_(0).get<Tag_::PATTERN>();
         }
        break;

        case 152:
#line 9 "inc/optmsrule"
        {
         d_val_ = vs_(0).get<Tag_::PATTERN>();
         }
        break;

        case 153:
#line 23 "inc/optmsrule"
        {
         orAction();
         }
        break;

        case 154:
#line 28 "inc/optmsrule"
        {
         addRule(vs_(0).get<Tag_::PATTERN>(), true); 
         }
        break;

        case 156:
#line 40 "inc/optmsrule"
        {
         assignBlock();
         }
        break;

    }
    // $insert debug
    if (d_debug_)
        s_out_ <<  "... completed" << stype_(", semantic: ", vs_(0)) << '\n' << dflush_;
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {
        // $insert debug
        if (d_debug_)
            s_out_ <<  "\nREDUCE: rule " << -action << '\n' << dflush_;

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken_()
{
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is Reserved_::UNDETERMINED_ 
    // another token is obtained from lex(). Then savedToken_() is assigned
    // to d_token.

    if (token_() != Reserved_::UNDETERMINED_)        // no need for a token: got one
    {
        // $insert debug
        if (d_debug_)
            s_out_ <<  "available token " << symbol_(token_()) << '\n' << dflush_;
        return;                             // already
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();                       // consume pending token
        // $insert debug
        if (d_debug_)
            s_out_ <<  "retrieved token " << symbol_(token_()) << stype_(", semantic = ", d_val_) << '\n' << dflush_;
    }
    else
    {
        ++d_acceptedTokens_;               // accept another token (see
                                            // errorRecover())
        lex_(lex());
        print_();
        // $insert debug
        if (d_debug_)
            s_out_ <<  "scanner token " << symbol_(token_()) << '\n' << dflush_;
    }
    print();
}

// derived/print
void Parser::print_()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    // $insert debug
    if (d_debug_)
        s_out_ <<  "parse(): Parsing starts" << '\n' << dflush_;
    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt

        if (d_debug_)
            s_out_ << '\n';

        nextCycle_();
    }
}
catch (Return_ retValue)
{
    // $insert debug
    if (d_debug_)
        s_out_ <<  "parse(): returns " << retValue << " or " << d_nErrors_  << '\n' << dflush_;
    return retValue or d_nErrors_;
}


// derived/tail


